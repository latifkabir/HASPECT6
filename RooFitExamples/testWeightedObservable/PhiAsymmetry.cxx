/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "PhiAsymmetry.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(PhiAsymmetry) 

 PhiAsymmetry::PhiAsymmetry(const char *name, const char *title, 
                        RooAbsReal& _Phi,
                        RooAbsReal& _Pol,
                        RooAbsCategory&  _PolState,
                        RooAbsReal& _A,
                        RooAbsReal& _B) :
   RooAbsPdf(name,title), 
   Phi("Phi","Phi",this,_Phi),
   Pol("Pol","Pol",this,_Pol),
   PolState("PolState","PolState",this,_PolState),
   A("A","A",this,_A),
   B("B","B",this,_B)
 {
  } 


 PhiAsymmetry::PhiAsymmetry(const PhiAsymmetry& other, const char* name) :  
   RooAbsPdf(other,name), 
   Phi("Phi",this,other.Phi),
   Pol("Pol",this,other.Pol),
   PolState("PolState",this,other.PolState),
   A("A",this,other.A),
   B("B",this,other.B)
 { 
 } 



 Double_t PhiAsymmetry::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 

   return 1.0 + PolState*Pol*(A*TMath::Cos(2*TMath::DegToRad()*Phi)+B*TMath::Sin(2*TMath::DegToRad()*Phi)); 
 } 



