Here we generate events in 2 variables Z(-1,1) and Phi(-pi,pi)
with "no physics" i.e. flat distributions. We then distort the
events to mimic some detector effects i.e. resolution and acceptance.

Once we have these events we apply the physics in the shape of
spherical harmonic moments, to the truth values of the variables
then try fitting the distorted(reconstructed) variables to see if we get the
same values back.
///////////////////////////EVENT GENERATOR
The generator is given as a ROOT macro it can be run :
    root 'MakeEventsRes.C++(1E6)'
Where 1E6 is the number of events you want to generate
This will produce 2 files : phase_space.root and accepted_res.root
It is mainly the accepted_res.root file we wil need,
phase_space.root would be used for normalisation

The tree includes the following variable branches :
UID = unique event ID for each event
Z = reconstructed decay cos theta
Phi = reconstructed decay phi
E = additional variable for splitting in bins
genZ = generated decay cos theta
genPhi = generated decay phi

*Note the prefix gen is necessary for the RooFit class to identify
the generated truth values and weight the events properly

The variables Z and Phi are distorted as prescribed in the DetectorSim0 function
Additional functions can be added to describe different detector responses.
The default acceptance function is hemispherical:
  if(genZ*genZ+genPhi*genPhi/TMath::Pi()/TMath::Pi()<2*gRandom->Uniform(0,1))
The default resoultions are 0.1 in cos theta
    Z=genZ+gRandom->Gaus(0,0.1); //width cos theta 0.1 = 5% or range
and 2deg in phi
    Phi=genPhi+gRandom->Gaus(0,2*TMath::DegToRad()); //width 2deg

/////////////////////////////////EVENT FITTER
The fit routine has 2 stages:
1) Generate a subset of the accepted_res events with a decay angles spherical harmonic moments model folded in using the generated branches.
2) Fit this subset (using reconstructed branches) with the spherical harmonic moments and see if the results match the input moments

To run 1 such fit :
   root --hsfit --RooHSSphHarMoments.cxx TestAccFit.C

There are comments in the TestAccFit.C macro to help understand what is going on
You can speed it up by reducing the number of events in the integral calc.
  pdf->SetNInt(100000);//Number of events to use in integration calc.
Note the plot of Z and Phi have the fit PDF drawn in red. To produce this line with acceptance effects added in you must integrate the PDF events tree over the other variable. So if you choose a low number of events the red line will have more statistical fluctutions.
 It would be an interesting investigation to see how much the fit results (moment parameters) depend on the number of events used to integrate. Optimising this could improve the speed of the fitting.
 
The output plots are saved in the directory specified with the RF->SetOutDir command in TestAccFit.C. There should be a new file OUTDIR/ResultsAFit.root

////////////////////////////////////MC study
You can also try the toy mc method :
Given some inital moment parameters, generate N datasets and fit to see how well the true values are reconstructed.
Here the N datasets are just taken from the initial accepted_res.root file so you need to make sure there are sufficient events to cover all the fits.

This can be run using the TestAccStudy.C macro instead of TestAccFit.C

In addition to the ResultsAFit_X.root files (i.e. one file for every fit) There will be an overall file giving the fit paramter distribution and pull distributions.

//////////////////////////////////////
Binned study
This is shown in TestAccStudyBins.C